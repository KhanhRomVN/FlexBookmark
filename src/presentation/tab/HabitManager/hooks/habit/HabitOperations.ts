/**
 * üéØ HABIT OPERATIONS MANAGER
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * 
 * üìã T·ªîNG QUAN CH·ª®C NƒÇNG:
 * ‚îú‚îÄ‚îÄ üèóÔ∏è Qu·∫£n l√Ω c√°c thao t√°c CRUD cho th√≥i quen
 * ‚îú‚îÄ‚îÄ üîÑ X·ª≠ l√Ω ƒë·ªìng b·ªô h√≥a v·ªõi Google Sheets
 * ‚îú‚îÄ‚îÄ üéØ Qu·∫£n l√Ω tracking h√†ng ng√†y v√† streaks
 * ‚îú‚îÄ‚îÄ üóÇÔ∏è Batch operations (archive/delete nhi·ªÅu habits)
 * ‚îú‚îÄ‚îÄ üõ°Ô∏è Error handling v√† auto-recovery
 * ‚îî‚îÄ‚îÄ üìä State management v·ªõi optimistic updates
 * 
 * üèóÔ∏è C·∫§U TR√öC CH√çNH:
 * ‚îú‚îÄ‚îÄ CRUD Operations     ‚Üí Create, Read, Update, Delete habits
 * ‚îú‚îÄ‚îÄ Daily Tracking      ‚Üí C·∫≠p nh·∫≠t tracking h√†ng ng√†y
 * ‚îú‚îÄ‚îÄ Batch Operations    ‚Üí X·ª≠ l√Ω nhi·ªÅu habits c√πng l√∫c
 * ‚îú‚îÄ‚îÄ Error Handling      ‚Üí X·ª≠ l√Ω l·ªói v√† retry logic
 * ‚îú‚îÄ‚îÄ State Management    ‚Üí Qu·∫£n l√Ω state v·ªõi optimistic updates
 * ‚îî‚îÄ‚îÄ Auth Integration    ‚Üí T√≠ch h·ª£p v·ªõi authentication system
 * 
 * üîß C√ÅC CH·ª®C NƒÇNG CH√çNH:
 * ‚îú‚îÄ‚îÄ createHabit()       ‚Üí T·∫°o habit m·ªõi
 * ‚îú‚îÄ‚îÄ updateHabit()       ‚Üí C·∫≠p nh·∫≠t habit
 * ‚îú‚îÄ‚îÄ deleteHabit()       ‚Üí X√≥a habit
 * ‚îú‚îÄ‚îÄ updateDailyHabit()  ‚Üí C·∫≠p nh·∫≠t tracking h√†ng ng√†y
 * ‚îú‚îÄ‚îÄ archiveHabit()      ‚Üí Archive/unarchive habit
 * ‚îú‚îÄ‚îÄ batchArchiveHabits()‚Üí Archive nhi·ªÅu habits
 * ‚îú‚îÄ‚îÄ batchDeleteHabits() ‚Üí X√≥a nhi·ªÅu habits
 * ‚îî‚îÄ‚îÄ handleError()       ‚Üí X·ª≠ l√Ω l·ªói th·ªëng nh·∫•t
 */

// üìö IMPORTS & TYPES
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

import type { Habit, HabitFormData } from '../../types/habit';
import { HabitUtils } from '../../utils/habit/HabitUtils';
import type { HabitOperationResult, BatchOperationResult } from '../../types/drive';

// üìã INTERFACE DEFINITIONS
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

interface HabitOperationsParams {
    habitUtils: HabitUtils | null;
    currentSheetId: string | null;
    habits: Habit[];
    setHabits: (habits: Habit[] | ((prev: Habit[]) => Habit[])) => void;
    setLoading: (loading: boolean) => void;
    setError: (error: string | null) => void;
    isAuthReady: () => boolean;
    getAuthStatus: () => any;
    diagnoseAuthError: (error: any) => Promise<any>;
    attemptAutoRecovery: (diagnostic: any) => Promise<boolean>;
}

// üè≠ MAIN OPERATIONS FACTORY
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

export const HabitOperations = (params: HabitOperationsParams) => {
    const {
        habitUtils,
        currentSheetId,
        habits,
        setHabits,
        setLoading,
        setError,
        diagnoseAuthError,
        attemptAutoRecovery
    } = params;

    // ========== üõ†Ô∏è UTILITIES ==========

    /**
     * üÜî T·∫°o ID duy nh·∫•t cho habit m·ªõi
     * @private
     * @returns {string} Unique habit ID
     */
    const generateHabitId = (): string => {
        return `habit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    };

    /**
     * üõ°Ô∏è X·ª≠ l√Ω l·ªói th·ªëng nh·∫•t v·ªõi auth diagnosis
     * @private
     * @param error - Error object
     * @param operation - T√™n operation g√¢y l·ªói
     * @returns {Promise<boolean>} True n·∫øu c·∫ßn retry
     */
    const handleError = async (error: any, operation: string): Promise<boolean> => {
        console.error(`‚ùå Error in ${operation}:`, error);

        // üîç Check auth-related errors
        const isAuthError = error?.message?.includes('401') ||
            error?.message?.includes('403') ||
            error?.message?.includes('invalid_grant') ||
            error?.status === 401 ||
            error?.status === 403;

        if (isAuthError) {
            // ü©∫ Diagnose auth error
            const diagnostic = await diagnoseAuthError(error);

            if (!diagnostic.isHealthy) {
                const criticalIssues = diagnostic.issues.filter((i: { severity: string; }) => i.severity === 'critical');

                if (criticalIssues.length > 0) {
                    // üîÑ Try auto-recovery
                    const autoRecovered = await attemptAutoRecovery(diagnostic);

                    if (!autoRecovered) {
                        const errorMsg = `${operation} failed: ${diagnostic.recommendations.join(', ')}`;
                        setError(errorMsg);
                        return false;
                    }

                    // ‚úÖ Auto-recovered, indicate retry
                    return true;
                }
            }
        }

        // ‚ö†Ô∏è Not auth-related or non-critical error
        const errorMessage = error instanceof Error ? error.message : `${operation} failed`;
        setError(errorMessage);
        return false;
    };

    // ========== üèóÔ∏è CRUD OPERATIONS ==========

    /**
     * üÜï T·∫°o habit m·ªõi
     * - Optimistic update local state
     * - Ghi v√†o Google Sheets
     * - Rollback n·∫øu c√≥ l·ªói
     * @param formData - D·ªØ li·ªáu habit form
     * @returns {Promise<HabitOperationResult>} K·∫øt qu·∫£ operation
     */
    const createHabit = async (formData: HabitFormData): Promise<HabitOperationResult> => {
        if (!habitUtils || !currentSheetId) {
            return {
                success: false,
                error: 'Drive not initialized',
                needsAuth: true
            };
        }

        // üèóÔ∏è Generate new habit object
        const newHabit: Habit = {
            id: generateHabitId(),
            name: formData.name,
            description: formData.description || '',
            habitType: formData.habitType,
            difficultyLevel: formData.difficultyLevel,
            goal: formData.habitType === 'good' ? formData.goal : undefined,
            limit: formData.habitType === 'bad' ? formData.limit : undefined,
            currentStreak: 0,
            longestStreak: 0,
            dailyTracking: Array(31).fill(null),
            createdDate: new Date(),
            colorCode: formData.colorCode || '#3b82f6',
            category: formData.category,
            tags: formData.tags || [],
            isArchived: false,
            isQuantifiable: formData.isQuantifiable || false,
            unit: formData.unit || '',
            startTime: formData.startTime || '',
            subtasks: formData.subtasks || []
        };

        try {
            setLoading(true);
            setError(null);

            // ‚ö° Optimistic update to local state
            setHabits(prev => [...prev, newHabit]);

            // üíæ Save to Google Sheets
            await habitUtils.writeHabit(currentSheetId, newHabit);

            console.log('‚úÖ Habit created successfully:', newHabit.id);

            return {
                success: true,
                data: newHabit
            };

        } catch (error) {
            console.error('‚ùå Create habit failed:', error);

            // ‚Ü©Ô∏è Revert optimistic update
            setHabits(prev => prev.filter(h => h.id !== newHabit.id));

            const shouldRetry = await handleError(error, 'Create Habit');
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Create habit failed',
                needsAuth: shouldRetry
            };
        } finally {
            setLoading(false);
        }
    };

    /**
     * ‚úèÔ∏è C·∫≠p nh·∫≠t habit hi·ªán c√≥
     * - Optimistic update local state
     * - C·∫≠p nh·∫≠t Google Sheets
     * - Rollback n·∫øu c√≥ l·ªói
     * @param updatedHabit - Habit ƒë√£ c·∫≠p nh·∫≠t
     * @returns {Promise<HabitOperationResult>} K·∫øt qu·∫£ operation
     */
    const updateHabit = async (updatedHabit: Habit): Promise<HabitOperationResult> => {
        if (!habitUtils || !currentSheetId) {
            return {
                success: false,
                error: 'Drive not initialized',
                needsAuth: true
            };
        }

        const originalHabit = habits.find(h => h.id === updatedHabit.id);
        if (!originalHabit) {
            return {
                success: false,
                error: 'Habit not found'
            };
        }

        try {
            setLoading(true);
            setError(null);

            // ‚ö° Optimistic update
            setHabits(prev => prev.map(h => h.id === updatedHabit.id ? updatedHabit : h));

            // üíæ Find habit index and update in Google Sheets
            const habitIndex = habits.findIndex(h => h.id === updatedHabit.id);
            await habitUtils.writeHabit(currentSheetId, updatedHabit, habitIndex);

            console.log('‚úÖ Habit updated successfully:', updatedHabit.id);

            return {
                success: true,
                data: updatedHabit
            };

        } catch (error) {
            console.error('‚ùå Update habit failed:', error);

            // ‚Ü©Ô∏è Revert optimistic update
            setHabits(prev => prev.map(h => h.id === updatedHabit.id ? originalHabit : h));

            const shouldRetry = await handleError(error, 'Update Habit');
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Update habit failed',
                needsAuth: shouldRetry
            };
        } finally {
            setLoading(false);
        }
    };

    /**
     * üóëÔ∏è X√≥a habit
     * - Optimistic update local state
     * - X√≥a t·ª´ Google Sheets
     * - Rollback n·∫øu c√≥ l·ªói
     * @param habitId - ID habit c·∫ßn x√≥a
     * @returns {Promise<HabitOperationResult>} K·∫øt qu·∫£ operation
     */
    const deleteHabit = async (habitId: string): Promise<HabitOperationResult> => {
        if (!habitUtils || !currentSheetId) {
            return {
                success: false,
                error: 'Drive not initialized',
                needsAuth: true
            };
        }

        const habitToDelete = habits.find(h => h.id === habitId);
        if (!habitToDelete) {
            return {
                success: false,
                error: 'Habit not found'
            };
        }

        try {
            setLoading(true);
            setError(null);

            // ‚ö° Optimistic update
            setHabits(prev => prev.filter(h => h.id !== habitId));

            // üóëÔ∏è Delete from Google Sheets
            await habitUtils.deleteHabit(currentSheetId, habitId);

            console.log('‚úÖ Habit deleted successfully:', habitId);

            return {
                success: true
            };

        } catch (error) {
            console.error('‚ùå Delete habit failed:', error);

            // ‚Ü©Ô∏è Revert optimistic update
            setHabits(prev => [...prev, habitToDelete]);

            const shouldRetry = await handleError(error, 'Delete Habit');
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Delete habit failed',
                needsAuth: shouldRetry
            };
        } finally {
            setLoading(false);
        }
    };

    /**
     * üìÖ C·∫≠p nh·∫≠t daily habit tracking
     * - C·∫≠p nh·∫≠t tracking value cho ng√†y c·ª• th·ªÉ
     * - Recalculate streaks
     * - C·∫≠p nh·∫≠t c·∫£ local state v√† Google Sheets
     * @param habitId - ID habit
     * @param day - Ng√†y trong th√°ng (1-31)
     * @param value - Gi√° tr·ªã tracking
     * @returns {Promise<HabitOperationResult>} K·∫øt qu·∫£ operation
     */
    const updateDailyHabit = async (
        habitId: string,
        day: number,
        value: number
    ): Promise<HabitOperationResult> => {
        if (!habitUtils || !currentSheetId) {
            return {
                success: false,
                error: 'Drive not initialized',
                needsAuth: true
            };
        }

        if (day < 1 || day > 31) {
            return {
                success: false,
                error: 'Day must be between 1 and 31'
            };
        }

        const originalHabit = habits.find(h => h.id === habitId);
        if (!originalHabit) {
            return {
                success: false,
                error: 'Habit not found'
            };
        }

        try {
            setError(null);

            // üìä Update in Google Sheets and get back updated habit with recalculated streaks
            const updatedHabit = await habitUtils.updateDailyHabit(currentSheetId, habitId, day, value);

            if (updatedHabit) {
                // üîÑ Update local state with the updated habit
                setHabits(prev => prev.map(h => h.id === habitId ? updatedHabit : h));
            }

            console.log('‚úÖ Daily habit tracking updated successfully');

            return {
                success: true,
                data: updatedHabit
            };

        } catch (error) {
            console.error('‚ùå Update daily habit failed:', error);

            const shouldRetry = await handleError(error, 'Update Daily Habit');
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Update daily tracking failed',
                needsAuth: shouldRetry
            };
        }
    };

    /**
     * üì¶ Archive/Unarchive habit
     * - Optimistic update local state
     * - C·∫≠p nh·∫≠t Google Sheets
     * - Rollback n·∫øu c√≥ l·ªói
     * @param habitId - ID habit
     * @param archive - True ƒë·ªÉ archive, false ƒë·ªÉ unarchive
     * @returns {Promise<HabitOperationResult>} K·∫øt qu·∫£ operation
     */
    const archiveHabit = async (habitId: string, archive: boolean): Promise<HabitOperationResult> => {
        if (!habitUtils || !currentSheetId) {
            return {
                success: false,
                error: 'Drive not initialized',
                needsAuth: true
            };
        }

        const originalHabit = habits.find(h => h.id === habitId);
        if (!originalHabit) {
            return {
                success: false,
                error: 'Habit not found'
            };
        }

        try {
            setLoading(true);
            setError(null);

            // ‚ö° Optimistic update
            const updatedHabit = { ...originalHabit, isArchived: archive };
            setHabits(prev => prev.map(h => h.id === habitId ? updatedHabit : h));

            // üíæ Update in Google Sheets
            const habitIndex = habits.findIndex(h => h.id === habitId);
            await habitUtils.writeHabit(currentSheetId, updatedHabit, habitIndex);

            console.log(`‚úÖ Habit ${archive ? 'archived' : 'unarchived'} successfully:`, habitId);

            return {
                success: true,
                data: updatedHabit
            };

        } catch (error) {
            console.error(`‚ùå ${archive ? 'Archive' : 'Unarchive'} habit failed:`, error);

            // ‚Ü©Ô∏è Revert optimistic update
            setHabits(prev => prev.map(h => h.id === habitId ? originalHabit : h));

            const shouldRetry = await handleError(error, `${archive ? 'Archive' : 'Unarchive'} Habit`);
            return {
                success: false,
                error: error instanceof Error ? error.message : `${archive ? 'Archive' : 'Unarchive'} failed`,
                needsAuth: shouldRetry
            };
        } finally {
            setLoading(false);
        }
    };

    // ========== üì¶ BATCH OPERATIONS ==========

    /**
     * üì¶ Archive/Unarchive nhi·ªÅu habits c√πng l√∫c
     * - X·ª≠ l√Ω parallel v·ªõi Promise.allSettled
     * - T·ªïng h·ª£p k·∫øt qu·∫£ th√†nh c√¥ng/th·∫•t b·∫°i
     * @param habitIds - M·∫£ng ID habits
     * @param archive - True ƒë·ªÉ archive, false ƒë·ªÉ unarchive
     * @returns {Promise<BatchOperationResult>} K·∫øt qu·∫£ batch operation
     */
    const batchArchiveHabits = async (
        habitIds: string[],
        archive: boolean
    ): Promise<BatchOperationResult> => {
        const results = await Promise.allSettled(
            habitIds.map(id => archiveHabit(id, archive))
        );

        let successful = 0;
        let failed = 0;
        const errors: string[] = [];
        let needsAuth = false;

        results.forEach((result, index) => {
            if (result.status === 'fulfilled' && result.value.success) {
                successful++;
            } else {
                failed++;
                const error = result.status === 'rejected'
                    ? result.reason
                    : result.value.error;
                errors.push(`Habit ${habitIds[index]}: ${error}`);

                if (result.status === 'fulfilled' && result.value.needsAuth) {
                    needsAuth = true;
                }
            }
        });

        return { successful, failed, errors, needsAuth };
    };

    /**
     * üóëÔ∏è X√≥a nhi·ªÅu habits c√πng l√∫c
     * - X·ª≠ l√Ω parallel v·ªõi Promise.allSettled
     * - T·ªïng h·ª£p k·∫øt qu·∫£ th√†nh c√¥ng/th·∫•t b·∫°i
     * @param habitIds - M·∫£ng ID habits
     * @returns {Promise<BatchOperationResult>} K·∫øt qu·∫£ batch operation
     */
    const batchDeleteHabits = async (habitIds: string[]): Promise<BatchOperationResult> => {
        const results = await Promise.allSettled(
            habitIds.map(id => deleteHabit(id))
        );

        let successful = 0;
        let failed = 0;
        const errors: string[] = [];
        let needsAuth = false;

        results.forEach((result, index) => {
            if (result.status === 'fulfilled' && result.value.success) {
                successful++;
            } else {
                failed++;
                const error = result.status === 'rejected'
                    ? result.reason
                    : result.value.error;
                errors.push(`Habit ${habitIds[index]}: ${error}`);

                if (result.status === 'fulfilled' && result.value.needsAuth) {
                    needsAuth = true;
                }
            }
        });

        return { successful, failed, errors, needsAuth };
    };

    // ========== üéØ RETURN OPERATIONS ==========

    return {
        createHabit,
        updateHabit,
        deleteHabit,
        archiveHabit,
        updateDailyHabit,
        batchArchiveHabits,
        batchDeleteHabits
    };
};