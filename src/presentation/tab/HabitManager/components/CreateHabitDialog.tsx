// src/presentation/tab/HabitManager/components/CreateHabitDialog.tsx
import React from "react";
import type {
  Habit,
  HabitFormData,
  HabitType,
  HabitCategory,
  DifficultyLevel,
} from "../types/habit";

interface CreateHabitDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (habitFormData: HabitFormData) => Promise<void>;
  editingHabit?: Habit | null;
  loading?: boolean;
  formData: HabitFormData;
  onFormChange: (formData: HabitFormData) => void;
}

const CreateHabitDialog: React.FC<CreateHabitDialogProps> = ({
  isOpen,
  onClose,
  onSubmit,
  editingHabit,
  loading = false,
  formData,
  onFormChange,
}) => {
  if (!isOpen) return null;

  const handleSubmit = async () => {
    if (!formData.name?.trim()) return;
    await onSubmit(formData);
  };

  const updateFormData = (updates: Partial<HabitFormData>) => {
    onFormChange({ ...formData, ...updates });
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <h3 className="text-lg font-semibold text-slate-900 mb-6">
          {editingHabit ? "Ch·ªânh s·ª≠a th√≥i quen" : "T·∫°o th√≥i quen m·ªõi"}
        </h3>

        <div className="space-y-6">
          {/* Basic Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-slate-700 mb-2">
                T√™n th√≥i quen *
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => updateFormData({ name: e.target.value })}
                className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                placeholder="Vd: U·ªëng 2 l√≠t n∆∞·ªõc m·ªói ng√†y"
                required
              />
            </div>

            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-slate-700 mb-2">
                M√¥ t·∫£ (t√πy ch·ªçn)
              </label>
              <textarea
                value={formData.description || ""}
                onChange={(e) =>
                  updateFormData({ description: e.target.value })
                }
                className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                rows={3}
                placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ th√≥i quen n√†y..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">
                Lo·∫°i th√≥i quen
              </label>
              <select
                value={formData.habitType}
                onChange={(e) =>
                  updateFormData({ habitType: e.target.value as HabitType })
                }
                className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
              >
                <option value="good">Th√≥i quen t·ªët (mu·ªën duy tr√¨)</option>
                <option value="bad">Th√≥i quen x·∫•u (mu·ªën h·∫°n ch·∫ø)</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">
                M·ª©c ƒë·ªô kh√≥
              </label>
              <select
                value={formData.difficultyLevel}
                onChange={(e) =>
                  updateFormData({
                    difficultyLevel: parseInt(
                      e.target.value
                    ) as DifficultyLevel,
                  })
                }
                className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
              >
                <option value={1}>M·ª©c 1 - R·∫•t d·ªÖ</option>
                <option value={2}>M·ª©c 2 - D·ªÖ</option>
                <option value={3}>M·ª©c 3 - Trung b√¨nh</option>
                <option value={4}>M·ª©c 4 - Kh√≥</option>
                <option value={5}>M·ª©c 5 - R·∫•t kh√≥</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">
                Danh m·ª•c
              </label>
              <select
                value={formData.category}
                onChange={(e) =>
                  updateFormData({ category: e.target.value as HabitCategory })
                }
                className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
              >
                <option value="health">üè• S·ª©c kh·ªèe</option>
                <option value="fitness">üí™ Th·ªÉ d·ª•c</option>
                <option value="productivity">‚ö° NƒÉng su·∫•t</option>
                <option value="mindfulness">üßò Thi·ªÅn ƒë·ªãnh</option>
                <option value="learning">üìö H·ªçc t·∫≠p</option>
                <option value="social">üë• X√£ h·ªôi</option>
                <option value="finance">üí∞ T√†i ch√≠nh</option>
                <option value="creativity">üé® S√°ng t·∫°o</option>
                <option value="other">üìå Kh√°c</option>
              </select>
            </div>

            {/* Goal/Limit based on habit type */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">
                {formData.habitType === "good"
                  ? "M·ª•c ti√™u h√†ng ng√†y"
                  : "Gi·ªõi h·∫°n t·ªëi ƒëa"}
              </label>
              <input
                type="number"
                min="0"
                value={
                  formData.habitType === "good"
                    ? formData.goal || ""
                    : formData.limit || ""
                }
                onChange={(e) => {
                  const value = e.target.value
                    ? parseInt(e.target.value)
                    : undefined;
                  if (formData.habitType === "good") {
                    updateFormData({ goal: value });
                  } else {
                    updateFormData({ limit: value });
                  }
                }}
                className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                placeholder={
                  formData.habitType === "good"
                    ? "Vd: 2 (2 l√≠t n∆∞·ªõc)"
                    : "Vd: 1 (t·ªëi ƒëa 1 ly c√† ph√™)"
                }
              />
            </div>
          </div>

          {/* Additional Options */}
          <div className="border-t pt-6">
            <h4 className="text-md font-medium text-slate-900 mb-4">
              T√πy ch·ªçn n√¢ng cao
            </h4>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  ƒê∆°n v·ªã ƒëo (t√πy ch·ªçn)
                </label>
                <input
                  type="text"
                  value={formData.unit || ""}
                  onChange={(e) => updateFormData({ unit: e.target.value })}
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  placeholder="Vd: ly, ph√∫t, trang..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Th·ªùi gian th·ª±c hi·ªán (t√πy ch·ªçn)
                </label>
                <input
                  type="time"
                  value={formData.startTime || ""}
                  onChange={(e) =>
                    updateFormData({ startTime: e.target.value })
                  }
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                />
              </div>

              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  L√Ω do/ƒê·ªông l·ª±c (t√πy ch·ªçn)
                </label>
                <textarea
                  value={formData.whyReason || ""}
                  onChange={(e) =>
                    updateFormData({ whyReason: e.target.value })
                  }
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  rows={2}
                  placeholder="T·∫°i sao b·∫°n mu·ªën thay ƒë·ªïi th√≥i quen n√†y?"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  M√†u s·∫Øc
                </label>
                <div className="flex items-center gap-2">
                  <input
                    type="color"
                    value={formData.colorCode}
                    onChange={(e) =>
                      updateFormData({ colorCode: e.target.value })
                    }
                    className="w-12 h-10 border border-slate-300 rounded cursor-pointer"
                  />
                  <span className="text-sm text-slate-600">
                    Ch·ªçn m√†u ƒë·∫°i di·ªán
                  </span>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Emoji (t√πy ch·ªçn)
                </label>
                <input
                  type="text"
                  maxLength={2}
                  value={formData.emoji || ""}
                  onChange={(e) => updateFormData({ emoji: e.target.value })}
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  placeholder="üíß"
                />
              </div>
            </div>
          </div>
        </div>

        <div className="flex items-center justify-end gap-3 mt-8 pt-6 border-t">
          <button
            onClick={onClose}
            className="px-6 py-2 text-slate-600 hover:text-slate-800 transition-colors rounded-lg hover:bg-slate-100"
          >
            H·ªßy
          </button>
          <button
            onClick={handleSubmit}
            disabled={loading || !formData.name?.trim()}
            className="px-6 py-2 bg-green-500 hover:bg-green-600 disabled:bg-slate-300 text-white rounded-lg font-medium transition-colors disabled:cursor-not-allowed"
          >
            {loading
              ? "ƒêang x·ª≠ l√Ω..."
              : editingHabit
              ? "C·∫≠p nh·∫≠t th√≥i quen"
              : "T·∫°o th√≥i quen"}
          </button>
        </div>
      </div>
    </div>
  );
};

export default CreateHabitDialog;
